// Code generated by goctl. DO NOT EDIT.
// Source: greet.proto

package greet_client

import (
	"context"

	"learn-k8s/app/greet/greet"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LogReq   = greet.LogReq
	LogRsp   = greet.LogRsp
	Request  = greet.Request
	Response = greet.Response

	Greet interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		Log(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*LogRsp, error)
	}

	defaultGreet struct {
		cli zrpc.Client
	}
)

func NewGreet(cli zrpc.Client) Greet {
	return &defaultGreet{
		cli: cli,
	}
}

func (m *defaultGreet) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := greet.NewGreetClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultGreet) Log(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*LogRsp, error) {
	client := greet.NewGreetClient(m.cli.Conn())
	return client.Log(ctx, in, opts...)
}
