GOPATH:=$(shell go env GOPATH)
VERSION=$(shell git describe --tags --always)
APP_RELATIVE_PATH=$(shell a=`basename $$PWD` && cd .. && b=`basename $$PWD` && echo $$b/$$a)
INTERNAL_PROTO_FILES=$(shell find internal -name *.proto)
API_PROTO_FILES=$(shell cd ../../$(APP_RELATIVE_PATH) && find . -name *.proto)
KRATOS_VERSION=$(shell go mod graph |grep zeromicro/go-zero |head -n 1 |awk -F '@' '{print $$2}')
# KRATOS=$(GOPATH)/pkg/mod/github.com/go-kratos/kratos/v2@$(KRATOS_VERSION)
APP_NAME=$(shell echo $(APP_RELATIVE_PATH) | sed -En "s/\//-/p")
# DOCKER_IMAGE=$(shell echo $(APP_NAME) |awk -F '@' '{print "kilii/svc-" $$0 ":" $(VERSION)}')
DOCKER_IMAGE="kilii/svc-$(APP_NAME):$(VERSION)"

.PHONY: print
print:
	echo "GOPATH $(GOPATH)"
	echo "VERSION $(VERSION)"
	echo "APP_RELATIVE_PATH $(APP_RELATIVE_PATH)"
	echo "INTERNAL_PROTO_FILES $(INTERNAL_PROTO_FILES)"
	echo "API_PROTO_FILES $(API_PROTO_FILES)"
	echo "KRATOS_VERSION $(KRATOS_VERSION)"
	echo "KRATOS $(KRATOS)"
	echo "APP_NAME $(APP_NAME)"
	echo "DOCKER_IMAGE $(DOCKER_IMAGE)"

.PHONY: init
# init env
init:
	go get -u google.golang.org/protobuf/cmd/protoc-gen-go
	go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
	go get -u github.com/go-kratos/kratos/cmd/protoc-gen-go-http/v2
	go get -u github.com/google/wire/cmd/wire
	go get -u github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2

# .PHONY: grpc
# # generate grpc code
# grpc:
# 	cd ../../$(APP_RELATIVE_PATH) && protoc --proto_path=. \
#            --proto_path=../../third_party \
#            --go_out=paths=source_relative:. \
#            --go-grpc_out=paths=source_relative:. \
#            $(API_PROTO_FILES)

.PHONY: gateway
# generate grpc-gateway file
gateway:
	cd ../../$(APP_RELATIVE_PATH) && protoc --descriptor_set_out=../../output/gateway/$(API_PROTO_FILES).pb $(API_PROTO_FILES) \
		--proto_path=. --proto_path=../../third_party/ 

.PHONY: grpc
# generate grpc code
grpc: gateway
	cd ../../$(APP_RELATIVE_PATH) && goctl rpc protoc $(API_PROTO_FILES) \
	--go_out=. --go-grpc_out=. --zrpc_out=. --style=go_zero \
	--proto_path=./ --proto_path=../../third_party
	
.PHONY: http
# generate http code
http:
	cd ../../$(APP_RELATIVE_PATH) && protoc --proto_path=. \
           --proto_path=../../../third_party \
           --go_out=paths=source_relative:. \
           --go-http_out=paths=source_relative:. \
           $(API_PROTO_FILES)
.PHONY: ws
# generate websocket service
ws:
	cd ../../$(APP_RELATIVE_PATH) && goctl api go -api ./ws.api -dir . \
		-style go_zero --home=../../deploy/template

.PHONY: kube
# generate kube file
kube:
	cd ../../$(APP_RELATIVE_PATH) && goctl kube deploy --name $(APP_NAME)  \
		--namespace k8s-practice --port 8888 --image kilii/svc-$(APP_NAME):0.1.1 \
		--imagePullPolicy Always --minReplicas 1 --replicas 1 --revisions 3 \
		--home=../../deploy/template \
		-o ../../deploy/kubernetes/app/app-ws.yaml

.PHONY: errors
# generate errors code
errors:
	cd ../../../api/$(APP_RELATIVE_PATH) && protoc --proto_path=. \
           --proto_path=../../../third_party \
           --go_out=paths=source_relative:. \
           --go-errors_out=paths=source_relative:. \
           $(API_PROTO_FILES)

.PHONY: swagger
# generate swagger
swagger:
	cd ../../../api/$(APP_RELATIVE_PATH) && protoc --proto_path=. \
	        --proto_path=../../../third_party \
	        --openapiv2_out . \
	        --openapiv2_opt logtostderr=true \
           $(API_PROTO_FILES)

.PHONY: proto
# generate internal proto struct
proto:
	protoc --proto_path=. \
           --proto_path=../../../third_party \
           --go_out=paths=source_relative:. \
           $(INTERNAL_PROTO_FILES)

.PHONY: generate
# generate client code
generate:
	go generate ./...

.PHONY: build
# build
build:
	mkdir -p bin/ && go build -ldflags "-X main.Version=$(VERSION)" -o ./bin/ ./...

.PHONY: test
# test
test:
	go test -v ./... -cover

.PHONY: run
run:
	cd cmd/server/ && go run .

.PHONY: ent
ent:
	cd internal/data/ && ent generate ./ent/schema

.PHONY: docker
docker:
	cd ../.. && \
	docker build -f deploy/build/Dockerfile --build-arg APP_RELATIVE_PATH=$(APP_RELATIVE_PATH) -t $(DOCKER_IMAGE) . && \
	docker image push $(DOCKER_IMAGE)

.PHONY: wire
# generate wire
wire:
	cd cmd/server && wire

.PHONY: api
# generate api proto
api: grpc http swagger errors

.PHONY: all
# generate all
all: grpc http proto generate build test

.PHONY: images
# build docker images
images: build
	docker build -t $(DOCKER_IMAGE) .

# show help
help:
	@echo ''
	@echo 'Usage:'
	@echo ' make [target]'
	@echo ''
	@echo 'Targets:'
	@awk '/^[a-zA-Z\-\_0-9]+:/ { \
	helpMessage = match(lastLine, /^# (.*)/); \
		if (helpMessage) { \
			helpCommand = substr($$1, 0, index($$1, ":")-1); \
			helpMessage = substr(lastLine, RSTART + 2, RLENGTH); \
			printf "\033[36m%-22s\033[0m %s\n", helpCommand,helpMessage; \
		} \
	} \
	{ lastLine = $$0 }' $(MAKEFILE_LIST)

.DEFAULT_GOAL := help
